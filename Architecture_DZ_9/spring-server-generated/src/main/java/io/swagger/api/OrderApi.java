/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.model.Order;
import io.swagger.model.Specification;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-15T15:11:33.384Z[GMT]")
@Validated
public interface OrderApi {

    @Operation(summary = "Create a new order", description = "Create a new order", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/order/add",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Order> createOrder(@NotNull @Parameter(in = ParameterIn.QUERY, description = "user ID account" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "userID", required = true) String userID, @NotNull @Parameter(in = ParameterIn.QUERY, description = "OS preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "OS name", required = true) String osName, @NotNull @Parameter(in = ParameterIn.QUERY, description = "OS version preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "OS version", required = true) String osVersion, @NotNull @Parameter(in = ParameterIn.QUERY, description = "processor preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "procName", required = true) String procName, @NotNull @Parameter(in = ParameterIn.QUERY, description = "processor cores preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "procCores", required = true) Integer procCores, @NotNull @Parameter(in = ParameterIn.QUERY, description = "processor frequency preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "procFreq", required = true) Integer procFreq, @NotNull @Parameter(in = ParameterIn.QUERY, description = "RAM volume preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ram", required = true) Integer ram, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Disk type preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "disk type", required = true) String diskType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Disk volume preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "disk volume", required = true) Integer diskVolume, @NotNull @Parameter(in = ParameterIn.QUERY, description = "IP type preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ip type", required = true) String ipType, @NotNull @Parameter(in = ParameterIn.QUERY, description = "IP quantity preffered" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "ip quantity", required = true) Integer ipQuantity, @NotNull @Parameter(in = ParameterIn.QUERY, description = "months payed" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "months", required = true) Integer months, @Parameter(in = ParameterIn.DEFAULT, description = "create a new order", required=true, schema=@Schema()) @Valid @RequestBody Order body);


    @Operation(summary = "Delete an order by ID", description = "delete an order by ID", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid order ID value"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Order> deleteOrder(@Parameter(in = ParameterIn.PATH, description = "Order ID to delete", required=true, schema=@Schema()) @PathVariable("orderId") Long orderId);


    @Operation(summary = "Get order by ID", description = "Get order by ID", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrder(@Parameter(in = ParameterIn.PATH, description = "ID of order to return", required=true, schema=@Schema()) @PathVariable("orderId") Long orderId);


    @Operation(summary = "Update info about an existing order by Id", description = "Update info about an existing order by Id", tags={ "order" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/order/{orderId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Order> updateOrder(@Parameter(in = ParameterIn.PATH, description = "ID of order to return", required=true, schema=@Schema()) @PathVariable("orderId") Long orderId, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existing order in the store", required=true, schema=@Schema()) @Valid @RequestBody Order body);

}

