/*
 * VDS service
 * This is a study project considering server based on the OpenAPI 3.0 specification.  You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: kardan97@yandex.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.Order;
import io.swagger.client.model.Specification;
import io.swagger.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderApi {
    private ApiClient apiClient;

    public OrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOrder
     * @param body create a new order (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrderCall(Order body, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/order/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userID", userID));
        if (osName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OS name", osName));
        if (osVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OS version", osVersion));
        if (procName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("procName", procName));
        if (procCores != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("procCores", procCores));
        if (procFreq != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("procFreq", procFreq));
        if (ram != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ram", ram));
        if (diskType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disk type", diskType));
        if (diskVolume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disk volume", diskVolume));
        if (ipType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip type", ipType));
        if (ipQuantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip quantity", ipQuantity));
        if (months != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("months", months));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrderValidateBeforeCall(Order body, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createOrder(Async)");
        }
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling createOrder(Async)");
        }
        // verify the required parameter 'osName' is set
        if (osName == null) {
            throw new ApiException("Missing the required parameter 'osName' when calling createOrder(Async)");
        }
        // verify the required parameter 'osVersion' is set
        if (osVersion == null) {
            throw new ApiException("Missing the required parameter 'osVersion' when calling createOrder(Async)");
        }
        // verify the required parameter 'procName' is set
        if (procName == null) {
            throw new ApiException("Missing the required parameter 'procName' when calling createOrder(Async)");
        }
        // verify the required parameter 'procCores' is set
        if (procCores == null) {
            throw new ApiException("Missing the required parameter 'procCores' when calling createOrder(Async)");
        }
        // verify the required parameter 'procFreq' is set
        if (procFreq == null) {
            throw new ApiException("Missing the required parameter 'procFreq' when calling createOrder(Async)");
        }
        // verify the required parameter 'ram' is set
        if (ram == null) {
            throw new ApiException("Missing the required parameter 'ram' when calling createOrder(Async)");
        }
        // verify the required parameter 'diskType' is set
        if (diskType == null) {
            throw new ApiException("Missing the required parameter 'diskType' when calling createOrder(Async)");
        }
        // verify the required parameter 'diskVolume' is set
        if (diskVolume == null) {
            throw new ApiException("Missing the required parameter 'diskVolume' when calling createOrder(Async)");
        }
        // verify the required parameter 'ipType' is set
        if (ipType == null) {
            throw new ApiException("Missing the required parameter 'ipType' when calling createOrder(Async)");
        }
        // verify the required parameter 'ipQuantity' is set
        if (ipQuantity == null) {
            throw new ApiException("Missing the required parameter 'ipQuantity' when calling createOrder(Async)");
        }
        // verify the required parameter 'months' is set
        if (months == null) {
            throw new ApiException("Missing the required parameter 'months' when calling createOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = createOrderCall(body, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new order
     * Create a new order
     * @param body create a new order (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order createOrder(Order body, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months) throws ApiException {
        ApiResponse<Order> resp = createOrderWithHttpInfo(body, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months);
        return resp.getData();
    }

    /**
     * Create a new order
     * Create a new order
     * @param body create a new order (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> createOrderWithHttpInfo(Order body, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months) throws ApiException {
        com.squareup.okhttp.Call call = createOrderValidateBeforeCall(body, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new order (asynchronously)
     * Create a new order
     * @param body create a new order (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrderAsync(Order body, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrderValidateBeforeCall(body, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createOrder
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID2  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createOrderCall(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID2, Specification specVDS, Integer monthsPayed, String orderExpiration, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/order/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userID != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("userID", userID));
        if (osName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OS name", osName));
        if (osVersion != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("OS version", osVersion));
        if (procName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("procName", procName));
        if (procCores != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("procCores", procCores));
        if (procFreq != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("procFreq", procFreq));
        if (ram != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ram", ram));
        if (diskType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disk type", diskType));
        if (diskVolume != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("disk volume", diskVolume));
        if (ipType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip type", ipType));
        if (ipQuantity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ip quantity", ipQuantity));
        if (months != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("months", months));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (orderNo != null)
        localVarFormParams.put("orderNo", orderNo);
        if (orderDateTime != null)
        localVarFormParams.put("orderDateTime", orderDateTime);
        if (userID != null)
        localVarFormParams.put("userID", userID);
        if (specVDS != null)
        localVarFormParams.put("specVDS", specVDS);
        if (monthsPayed != null)
        localVarFormParams.put("monthsPayed", monthsPayed);
        if (orderExpiration != null)
        localVarFormParams.put("orderExpiration", orderExpiration);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createOrderValidateBeforeCall(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID2, Specification specVDS, Integer monthsPayed, String orderExpiration, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createOrder(Async)");
        }
        // verify the required parameter 'orderNo' is set
        if (orderNo == null) {
            throw new ApiException("Missing the required parameter 'orderNo' when calling createOrder(Async)");
        }
        // verify the required parameter 'orderDateTime' is set
        if (orderDateTime == null) {
            throw new ApiException("Missing the required parameter 'orderDateTime' when calling createOrder(Async)");
        }
        // verify the required parameter 'userID2' is set
        if (userID2 == null) {
            throw new ApiException("Missing the required parameter 'userID2' when calling createOrder(Async)");
        }
        // verify the required parameter 'specVDS' is set
        if (specVDS == null) {
            throw new ApiException("Missing the required parameter 'specVDS' when calling createOrder(Async)");
        }
        // verify the required parameter 'monthsPayed' is set
        if (monthsPayed == null) {
            throw new ApiException("Missing the required parameter 'monthsPayed' when calling createOrder(Async)");
        }
        // verify the required parameter 'orderExpiration' is set
        if (orderExpiration == null) {
            throw new ApiException("Missing the required parameter 'orderExpiration' when calling createOrder(Async)");
        }
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling createOrder(Async)");
        }
        // verify the required parameter 'osName' is set
        if (osName == null) {
            throw new ApiException("Missing the required parameter 'osName' when calling createOrder(Async)");
        }
        // verify the required parameter 'osVersion' is set
        if (osVersion == null) {
            throw new ApiException("Missing the required parameter 'osVersion' when calling createOrder(Async)");
        }
        // verify the required parameter 'procName' is set
        if (procName == null) {
            throw new ApiException("Missing the required parameter 'procName' when calling createOrder(Async)");
        }
        // verify the required parameter 'procCores' is set
        if (procCores == null) {
            throw new ApiException("Missing the required parameter 'procCores' when calling createOrder(Async)");
        }
        // verify the required parameter 'procFreq' is set
        if (procFreq == null) {
            throw new ApiException("Missing the required parameter 'procFreq' when calling createOrder(Async)");
        }
        // verify the required parameter 'ram' is set
        if (ram == null) {
            throw new ApiException("Missing the required parameter 'ram' when calling createOrder(Async)");
        }
        // verify the required parameter 'diskType' is set
        if (diskType == null) {
            throw new ApiException("Missing the required parameter 'diskType' when calling createOrder(Async)");
        }
        // verify the required parameter 'diskVolume' is set
        if (diskVolume == null) {
            throw new ApiException("Missing the required parameter 'diskVolume' when calling createOrder(Async)");
        }
        // verify the required parameter 'ipType' is set
        if (ipType == null) {
            throw new ApiException("Missing the required parameter 'ipType' when calling createOrder(Async)");
        }
        // verify the required parameter 'ipQuantity' is set
        if (ipQuantity == null) {
            throw new ApiException("Missing the required parameter 'ipQuantity' when calling createOrder(Async)");
        }
        // verify the required parameter 'months' is set
        if (months == null) {
            throw new ApiException("Missing the required parameter 'months' when calling createOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = createOrderCall(id, orderNo, orderDateTime, userID2, specVDS, monthsPayed, orderExpiration, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new order
     * Create a new order
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID2  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order createOrder(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID2, Specification specVDS, Integer monthsPayed, String orderExpiration, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months) throws ApiException {
        ApiResponse<Order> resp = createOrderWithHttpInfo(id, orderNo, orderDateTime, userID2, specVDS, monthsPayed, orderExpiration, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months);
        return resp.getData();
    }

    /**
     * Create a new order
     * Create a new order
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID2  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> createOrderWithHttpInfo(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID2, Specification specVDS, Integer monthsPayed, String orderExpiration, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months) throws ApiException {
        com.squareup.okhttp.Call call = createOrderValidateBeforeCall(id, orderNo, orderDateTime, userID2, specVDS, monthsPayed, orderExpiration, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new order (asynchronously)
     * Create a new order
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID2  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param userID user ID account (required)
     * @param osName OS preffered (required)
     * @param osVersion OS version preffered (required)
     * @param procName processor preffered (required)
     * @param procCores processor cores preffered (required)
     * @param procFreq processor frequency preffered (required)
     * @param ram RAM volume preffered (required)
     * @param diskType Disk type preffered (required)
     * @param diskVolume Disk volume preffered (required)
     * @param ipType IP type preffered (required)
     * @param ipQuantity IP quantity preffered (required)
     * @param months months payed (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createOrderAsync(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID2, Specification specVDS, Integer monthsPayed, String orderExpiration, String userID, String osName, String osVersion, String procName, Integer procCores, Integer procFreq, Integer ram, String diskType, Integer diskVolume, String ipType, Integer ipQuantity, Integer months, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createOrderValidateBeforeCall(id, orderNo, orderDateTime, userID2, specVDS, monthsPayed, orderExpiration, userID, osName, osVersion, procName, procCores, procFreq, ram, diskType, diskVolume, ipType, ipQuantity, months, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteOrder
     * @param orderId Order ID to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteOrderCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/order/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteOrderValidateBeforeCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteOrderCall(orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an order by ID
     * delete an order by ID
     * @param orderId Order ID to delete (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order deleteOrder(Long orderId) throws ApiException {
        ApiResponse<Order> resp = deleteOrderWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Delete an order by ID
     * delete an order by ID
     * @param orderId Order ID to delete (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> deleteOrderWithHttpInfo(Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = deleteOrderValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete an order by ID (asynchronously)
     * delete an order by ID
     * @param orderId Order ID to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteOrderAsync(Long orderId, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteOrderValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrder
     * @param orderId ID of order to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrderCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/order/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrderValidateBeforeCall(Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = getOrderCall(orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get order by ID
     * Get order by ID
     * @param orderId ID of order to return (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order getOrder(Long orderId) throws ApiException {
        ApiResponse<Order> resp = getOrderWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Get order by ID
     * Get order by ID
     * @param orderId ID of order to return (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> getOrderWithHttpInfo(Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get order by ID (asynchronously)
     * Get order by ID
     * @param orderId ID of order to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrderAsync(Long orderId, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrderValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOrder
     * @param body Update an existing order in the store (required)
     * @param orderId ID of order to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderCall(Order body, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/order/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderValidateBeforeCall(Order body, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateOrder(Async)");
        }
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOrderCall(body, orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update info about an existing order by Id
     * Update info about an existing order by Id
     * @param body Update an existing order in the store (required)
     * @param orderId ID of order to return (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order updateOrder(Order body, Long orderId) throws ApiException {
        ApiResponse<Order> resp = updateOrderWithHttpInfo(body, orderId);
        return resp.getData();
    }

    /**
     * Update info about an existing order by Id
     * Update info about an existing order by Id
     * @param body Update an existing order in the store (required)
     * @param orderId ID of order to return (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> updateOrderWithHttpInfo(Order body, Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderValidateBeforeCall(body, orderId, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update info about an existing order by Id (asynchronously)
     * Update info about an existing order by Id
     * @param body Update an existing order in the store (required)
     * @param orderId ID of order to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderAsync(Order body, Long orderId, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderValidateBeforeCall(body, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateOrder
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param orderId ID of order to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateOrderCall(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID, Specification specVDS, Integer monthsPayed, String orderExpiration, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/order/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (orderNo != null)
        localVarFormParams.put("orderNo", orderNo);
        if (orderDateTime != null)
        localVarFormParams.put("orderDateTime", orderDateTime);
        if (userID != null)
        localVarFormParams.put("userID", userID);
        if (specVDS != null)
        localVarFormParams.put("specVDS", specVDS);
        if (monthsPayed != null)
        localVarFormParams.put("monthsPayed", monthsPayed);
        if (orderExpiration != null)
        localVarFormParams.put("orderExpiration", orderExpiration);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateOrderValidateBeforeCall(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID, Specification specVDS, Integer monthsPayed, String orderExpiration, Long orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateOrder(Async)");
        }
        // verify the required parameter 'orderNo' is set
        if (orderNo == null) {
            throw new ApiException("Missing the required parameter 'orderNo' when calling updateOrder(Async)");
        }
        // verify the required parameter 'orderDateTime' is set
        if (orderDateTime == null) {
            throw new ApiException("Missing the required parameter 'orderDateTime' when calling updateOrder(Async)");
        }
        // verify the required parameter 'userID' is set
        if (userID == null) {
            throw new ApiException("Missing the required parameter 'userID' when calling updateOrder(Async)");
        }
        // verify the required parameter 'specVDS' is set
        if (specVDS == null) {
            throw new ApiException("Missing the required parameter 'specVDS' when calling updateOrder(Async)");
        }
        // verify the required parameter 'monthsPayed' is set
        if (monthsPayed == null) {
            throw new ApiException("Missing the required parameter 'monthsPayed' when calling updateOrder(Async)");
        }
        // verify the required parameter 'orderExpiration' is set
        if (orderExpiration == null) {
            throw new ApiException("Missing the required parameter 'orderExpiration' when calling updateOrder(Async)");
        }
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling updateOrder(Async)");
        }
        
        com.squareup.okhttp.Call call = updateOrderCall(id, orderNo, orderDateTime, userID, specVDS, monthsPayed, orderExpiration, orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update info about an existing order by Id
     * Update info about an existing order by Id
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param orderId ID of order to return (required)
     * @return Order
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Order updateOrder(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID, Specification specVDS, Integer monthsPayed, String orderExpiration, Long orderId) throws ApiException {
        ApiResponse<Order> resp = updateOrderWithHttpInfo(id, orderNo, orderDateTime, userID, specVDS, monthsPayed, orderExpiration, orderId);
        return resp.getData();
    }

    /**
     * Update info about an existing order by Id
     * Update info about an existing order by Id
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param orderId ID of order to return (required)
     * @return ApiResponse&lt;Order&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Order> updateOrderWithHttpInfo(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID, Specification specVDS, Integer monthsPayed, String orderExpiration, Long orderId) throws ApiException {
        com.squareup.okhttp.Call call = updateOrderValidateBeforeCall(id, orderNo, orderDateTime, userID, specVDS, monthsPayed, orderExpiration, orderId, null, null);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update info about an existing order by Id (asynchronously)
     * Update info about an existing order by Id
     * @param id  (required)
     * @param orderNo  (required)
     * @param orderDateTime  (required)
     * @param userID  (required)
     * @param specVDS  (required)
     * @param monthsPayed  (required)
     * @param orderExpiration  (required)
     * @param orderId ID of order to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateOrderAsync(Long id, Long orderNo, OffsetDateTime orderDateTime, User userID, Specification specVDS, Integer monthsPayed, String orderExpiration, Long orderId, final ApiCallback<Order> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateOrderValidateBeforeCall(id, orderNo, orderDateTime, userID, specVDS, monthsPayed, orderExpiration, orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Order>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
