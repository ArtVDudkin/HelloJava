/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Room;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-09T12:22:10.559Z[GMT]")
@Validated
public interface RoomApi {

    @Operation(summary = "Add a new room", description = "Add a new room", tags={ "rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/room",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Room> addRoom(@Parameter(in = ParameterIn.DEFAULT, description = "Create a new room", required=true, schema=@Schema()) @Valid @RequestBody Room body);


    @Operation(summary = "Delete room by ID", description = "This delete room by ID.", tags={ "rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid room id supplied"),
        
        @ApiResponse(responseCode = "404", description = "Room not found") })
    @RequestMapping(value = "/room/{roomID}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Room> deleteRoom(@Parameter(in = ParameterIn.PATH, description = "The room id that needs to be deleted", required=true, schema=@Schema()) @PathVariable("roomID") Long roomID);


    @Operation(summary = "Get room by ID", description = "Get room by ID", tags={ "rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid room id supplied"),
        
        @ApiResponse(responseCode = "404", description = "Room not found") })
    @RequestMapping(value = "/room/{roomID}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Room> getRoom(@Parameter(in = ParameterIn.PATH, description = "The name that needs to be fetched. Use user1 for testing. ", required=true, schema=@Schema()) @PathVariable("roomID") Long roomID);


    @Operation(summary = "Update room by ID", description = "Update room by ID", tags={ "rooms" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid room id supplied"),
        
        @ApiResponse(responseCode = "404", description = "Room not found") })
    @RequestMapping(value = "/room/{roomID}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Room> updateRoom(@Parameter(in = ParameterIn.PATH, description = "room ID that need to be updated", required=true, schema=@Schema()) @PathVariable("roomID") Long roomID);

}

