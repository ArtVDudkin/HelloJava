/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Firmware;
import io.swagger.model.Model;
import io.swagger.model.ModelApiResponse;
import io.swagger.model.Robot;
import io.swagger.model.Statistic;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-09T12:22:10.559Z[GMT]")
@Validated
public interface RobotApi {

    @Operation(summary = "Add a new robot to user account", description = "Add a new robot to user account", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/robot/add",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Robot> addRobot(@Parameter(in = ParameterIn.DEFAULT, description = "Add a new robot to user account", required=true, schema=@Schema()) @Valid @RequestBody Robot body);


    @Operation(summary = "Check a current Robot status", description = "Check a current Robot status", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid robot ID value"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/robot/{robotId}/checkStatus",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Robot> checkStatus(@Parameter(in = ParameterIn.PATH, description = "Robot id to delete", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId);


    @Operation(summary = "Check a new firmware update for Robot", description = "Check a new firmware update for Robot", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Firmware.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid robot ID value"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/robot/{robotId}/checkUpdate",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Firmware> checkUpdate(@Parameter(in = ParameterIn.PATH, description = "Robot id to delete", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId);


    @Operation(summary = "Delete a robot by ID", description = "delete a robot by ID", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid robot ID value"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/robot/{robotId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Robot> deleteRobot(@Parameter(in = ParameterIn.PATH, description = "Robot id to delete", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId);


    @Operation(summary = "Downloads a new firmware update", description = "Downloads a new firmware update", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid robot ID value"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/robot/{robotId}/downloadUpdate",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ModelApiResponse> downloadFile(@Parameter(in = ParameterIn.PATH, description = "ID of pet to update", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId);


    @Operation(summary = "Get robot by ID", description = "Get robot by ID", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/robot/{robotId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Robot> getRobot(@Parameter(in = ParameterIn.PATH, description = "ID of robot to return", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId);


    @Operation(summary = "Update info about an existing robot", description = "Update info about an existing robot by Id", tags={ "robot" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Robot.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Robot not found") })
    @RequestMapping(value = "/robot/{robotId}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Robot> updateRobot(@Parameter(in = ParameterIn.PATH, description = "ID of robot to return", required=true, schema=@Schema()) @PathVariable("robotId") Long robotId, @Parameter(in = ParameterIn.DEFAULT, description = "Update an existent robot in the store", required=true, schema=@Schema()) @Valid @RequestBody Robot body);

}

