/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.model.Result;
import io.swagger.model.Room;
import io.swagger.model.Timetable;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-09T12:22:10.559Z[GMT]")
@Validated
public interface TimetableApi {

    @Operation(summary = "Delete all records from timetable", description = "", tags={ "timetable" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Timetable.class))) })
    @RequestMapping(value = "/timetable/all",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Timetable> clearTimetable();


    @Operation(summary = "Delete record from timetable by ID", description = "", tags={ "timetable" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Record not found in timetable") })
    @RequestMapping(value = "/timetable/{recordId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteRecord(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("recordId") Long recordId);


    @Operation(summary = "Update record in timetable by ID", description = "", tags={ "timetable" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Timetable.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Record not found in timetable") })
    @RequestMapping(value = "/timetable/{recordId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Timetable> editRecord(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("recordId") Long recordId);


    @Operation(summary = "Get record in timetable by ID", description = "", tags={ "timetable" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Timetable.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Record not found in timetable") })
    @RequestMapping(value = "/timetable/{recordId}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Timetable> getRecord(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("recordId") Long recordId);


    @Operation(summary = "Returns timetable with all known cleanings", description = "Returns timetable with all known cleanings", tags={ "timetable" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Timetable.class))),
        
        @ApiResponse(responseCode = "404", description = "Timetable not found") })
    @RequestMapping(value = "/timetable/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Timetable> getTimetable();


    @Operation(summary = "Create a new record in timetable", description = "Create a new record in timetable", tags={ "timetable" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Timetable.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/timetable/newclean",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Timetable> newRecord(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Timetable body);

}

