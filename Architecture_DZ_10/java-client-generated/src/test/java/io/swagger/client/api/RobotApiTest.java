/*
 * Cloud service for robot-vacuum cleaner
 * This is a study project considering server based on the OpenAPI 3.0 specification.  You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: kardan97@yandex.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Firmware;
import io.swagger.client.model.Model;
import io.swagger.client.model.ModelApiResponse;
import io.swagger.client.model.Robot;
import io.swagger.client.model.Statistic;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for RobotApi
 */
@Ignore
public class RobotApiTest {

    private final RobotApi api = new RobotApi();

    /**
     * Add a new robot to user account
     *
     * Add a new robot to user account
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addRobotTest() throws Exception {
        Robot body = null;
        Robot response = api.addRobot(body);

        // TODO: test validations
    }
    /**
     * Check a current Robot status
     *
     * Check a current Robot status
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkStatusTest() throws Exception {
        Long robotId = null;
        Robot response = api.checkStatus(robotId);

        // TODO: test validations
    }
    /**
     * Check a new firmware update for Robot
     *
     * Check a new firmware update for Robot
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void checkUpdateTest() throws Exception {
        Long robotId = null;
        Firmware response = api.checkUpdate(robotId);

        // TODO: test validations
    }
    /**
     * Delete a robot by ID
     *
     * delete a robot by ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRobotTest() throws Exception {
        Long robotId = null;
        Robot response = api.deleteRobot(robotId);

        // TODO: test validations
    }
    /**
     * Downloads a new firmware update
     *
     * Downloads a new firmware update
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void downloadFileTest() throws Exception {
        Long robotId = null;
        ModelApiResponse response = api.downloadFile(robotId);

        // TODO: test validations
    }
    /**
     * Get robot by ID
     *
     * Get robot by ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRobotTest() throws Exception {
        Long robotId = null;
        Robot response = api.getRobot(robotId);

        // TODO: test validations
    }
    /**
     * Update info about an existing robot
     *
     * Update info about an existing robot by Id
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateRobotTest() throws Exception {
        Robot body = null;
        Long robotId = null;
        Robot response = api.updateRobot(body, robotId);

        // TODO: test validations
    }
}
