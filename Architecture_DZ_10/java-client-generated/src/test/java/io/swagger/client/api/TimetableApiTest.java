/*
 * Cloud service for robot-vacuum cleaner
 * This is a study project considering server based on the OpenAPI 3.0 specification.  You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: kardan97@yandex.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.Result;
import io.swagger.client.model.Room;
import io.swagger.client.model.Timetable;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for TimetableApi
 */
@Ignore
public class TimetableApiTest {

    private final TimetableApi api = new TimetableApi();

    /**
     * Delete all records from timetable
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void clearTimetableTest() throws Exception {
        Timetable response = api.clearTimetable();

        // TODO: test validations
    }
    /**
     * Delete record from timetable by ID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws Exception {
        Long recordId = null;
        api.deleteRecord(recordId);

        // TODO: test validations
    }
    /**
     * Update record in timetable by ID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void editRecordTest() throws Exception {
        Long recordId = null;
        Timetable response = api.editRecord(recordId);

        // TODO: test validations
    }
    /**
     * Get record in timetable by ID
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRecordTest() throws Exception {
        Long recordId = null;
        Timetable response = api.getRecord(recordId);

        // TODO: test validations
    }
    /**
     * Returns timetable with all known cleanings
     *
     * Returns timetable with all known cleanings
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTimetableTest() throws Exception {
        Timetable response = api.getTimetable();

        // TODO: test validations
    }
    /**
     * Create a new record in timetable
     *
     * Create a new record in timetable
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void newRecordTest() throws Exception {
        Timetable body = null;
        Timetable response = api.newRecord(body);

        // TODO: test validations
    }
}
