/*
 * Cloud service for robot-vacuum cleaner
 * This is a study project considering server based on the OpenAPI 3.0 specification.  You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 *
 * OpenAPI spec version: 0.0.2
 * Contact: kardan97@yandex.ru
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Firmware;
import io.swagger.client.model.Model;
import io.swagger.client.model.ModelApiResponse;
import io.swagger.client.model.Robot;
import io.swagger.client.model.Statistic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RobotApi {
    private ApiClient apiClient;

    public RobotApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RobotApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addRobot
     * @param body Add a new robot to user account (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRobotCall(Robot body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/robot/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRobotValidateBeforeCall(Robot body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = addRobotCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new robot to user account
     * Add a new robot to user account
     * @param body Add a new robot to user account (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot addRobot(Robot body) throws ApiException {
        ApiResponse<Robot> resp = addRobotWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Add a new robot to user account
     * Add a new robot to user account
     * @param body Add a new robot to user account (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> addRobotWithHttpInfo(Robot body) throws ApiException {
        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new robot to user account (asynchronously)
     * Add a new robot to user account
     * @param body Add a new robot to user account (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRobotAsync(Robot body, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addRobot
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addRobotCall(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (serialNo != null)
        localVarFormParams.put("serialNo", serialNo);
        if (model != null)
        localVarFormParams.put("model", model);
        if (firmware != null)
        localVarFormParams.put("firmware", firmware);
        if (config != null)
        localVarFormParams.put("config", config);
        if (diadnostic != null)
        localVarFormParams.put("diadnostic", diadnostic);
        if (historyClean != null)
        localVarFormParams.put("historyClean", historyClean);
        if (status != null)
        localVarFormParams.put("status", status);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addRobotValidateBeforeCall(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addRobot(Async)");
        }
        // verify the required parameter 'serialNo' is set
        if (serialNo == null) {
            throw new ApiException("Missing the required parameter 'serialNo' when calling addRobot(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling addRobot(Async)");
        }
        // verify the required parameter 'firmware' is set
        if (firmware == null) {
            throw new ApiException("Missing the required parameter 'firmware' when calling addRobot(Async)");
        }
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling addRobot(Async)");
        }
        // verify the required parameter 'diadnostic' is set
        if (diadnostic == null) {
            throw new ApiException("Missing the required parameter 'diadnostic' when calling addRobot(Async)");
        }
        // verify the required parameter 'historyClean' is set
        if (historyClean == null) {
            throw new ApiException("Missing the required parameter 'historyClean' when calling addRobot(Async)");
        }
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling addRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = addRobotCall(id, serialNo, model, firmware, config, diadnostic, historyClean, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add a new robot to user account
     * Add a new robot to user account
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot addRobot(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status) throws ApiException {
        ApiResponse<Robot> resp = addRobotWithHttpInfo(id, serialNo, model, firmware, config, diadnostic, historyClean, status);
        return resp.getData();
    }

    /**
     * Add a new robot to user account
     * Add a new robot to user account
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> addRobotWithHttpInfo(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status) throws ApiException {
        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(id, serialNo, model, firmware, config, diadnostic, historyClean, status, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add a new robot to user account (asynchronously)
     * Add a new robot to user account
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addRobotAsync(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addRobotValidateBeforeCall(id, serialNo, model, firmware, config, diadnostic, historyClean, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkStatus
     * @param robotId Robot id to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkStatusCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}/checkStatus"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkStatusValidateBeforeCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling checkStatus(Async)");
        }
        
        com.squareup.okhttp.Call call = checkStatusCall(robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check a current Robot status
     * Check a current Robot status
     * @param robotId Robot id to delete (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot checkStatus(Long robotId) throws ApiException {
        ApiResponse<Robot> resp = checkStatusWithHttpInfo(robotId);
        return resp.getData();
    }

    /**
     * Check a current Robot status
     * Check a current Robot status
     * @param robotId Robot id to delete (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> checkStatusWithHttpInfo(Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = checkStatusValidateBeforeCall(robotId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check a current Robot status (asynchronously)
     * Check a current Robot status
     * @param robotId Robot id to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkStatusAsync(Long robotId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkStatusValidateBeforeCall(robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for checkUpdate
     * @param robotId Robot id to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call checkUpdateCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}/checkUpdate"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call checkUpdateValidateBeforeCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling checkUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = checkUpdateCall(robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check a new firmware update for Robot
     * Check a new firmware update for Robot
     * @param robotId Robot id to delete (required)
     * @return Firmware
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Firmware checkUpdate(Long robotId) throws ApiException {
        ApiResponse<Firmware> resp = checkUpdateWithHttpInfo(robotId);
        return resp.getData();
    }

    /**
     * Check a new firmware update for Robot
     * Check a new firmware update for Robot
     * @param robotId Robot id to delete (required)
     * @return ApiResponse&lt;Firmware&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Firmware> checkUpdateWithHttpInfo(Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = checkUpdateValidateBeforeCall(robotId, null, null);
        Type localVarReturnType = new TypeToken<Firmware>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check a new firmware update for Robot (asynchronously)
     * Check a new firmware update for Robot
     * @param robotId Robot id to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call checkUpdateAsync(Long robotId, final ApiCallback<Firmware> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = checkUpdateValidateBeforeCall(robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Firmware>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteRobot
     * @param robotId Robot id to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRobotCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRobotValidateBeforeCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling deleteRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRobotCall(robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a robot by ID
     * delete a robot by ID
     * @param robotId Robot id to delete (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot deleteRobot(Long robotId) throws ApiException {
        ApiResponse<Robot> resp = deleteRobotWithHttpInfo(robotId);
        return resp.getData();
    }

    /**
     * Delete a robot by ID
     * delete a robot by ID
     * @param robotId Robot id to delete (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> deleteRobotWithHttpInfo(Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = deleteRobotValidateBeforeCall(robotId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a robot by ID (asynchronously)
     * delete a robot by ID
     * @param robotId Robot id to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRobotAsync(Long robotId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRobotValidateBeforeCall(robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param robotId ID of pet to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}/downloadUpdate"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadFileValidateBeforeCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling downloadFile(Async)");
        }
        
        com.squareup.okhttp.Call call = downloadFileCall(robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Downloads a new firmware update
     * Downloads a new firmware update
     * @param robotId ID of pet to update (required)
     * @return ModelApiResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ModelApiResponse downloadFile(Long robotId) throws ApiException {
        ApiResponse<ModelApiResponse> resp = downloadFileWithHttpInfo(robotId);
        return resp.getData();
    }

    /**
     * Downloads a new firmware update
     * Downloads a new firmware update
     * @param robotId ID of pet to update (required)
     * @return ApiResponse&lt;ModelApiResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ModelApiResponse> downloadFileWithHttpInfo(Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(robotId, null, null);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Downloads a new firmware update (asynchronously)
     * Downloads a new firmware update
     * @param robotId ID of pet to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(Long robotId, final ApiCallback<ModelApiResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileValidateBeforeCall(robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ModelApiResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRobot
     * @param robotId ID of robot to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRobotCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRobotValidateBeforeCall(Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling getRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = getRobotCall(robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get robot by ID
     * Get robot by ID
     * @param robotId ID of robot to return (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot getRobot(Long robotId) throws ApiException {
        ApiResponse<Robot> resp = getRobotWithHttpInfo(robotId);
        return resp.getData();
    }

    /**
     * Get robot by ID
     * Get robot by ID
     * @param robotId ID of robot to return (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> getRobotWithHttpInfo(Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = getRobotValidateBeforeCall(robotId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get robot by ID (asynchronously)
     * Get robot by ID
     * @param robotId ID of robot to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRobotAsync(Long robotId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRobotValidateBeforeCall(robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRobot
     * @param body Update an existent robot in the store (required)
     * @param robotId ID of robot to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRobotCall(Robot body, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRobotValidateBeforeCall(Robot body, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRobot(Async)");
        }
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling updateRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRobotCall(body, robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update info about an existing robot
     * Update info about an existing robot by Id
     * @param body Update an existent robot in the store (required)
     * @param robotId ID of robot to return (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot updateRobot(Robot body, Long robotId) throws ApiException {
        ApiResponse<Robot> resp = updateRobotWithHttpInfo(body, robotId);
        return resp.getData();
    }

    /**
     * Update info about an existing robot
     * Update info about an existing robot by Id
     * @param body Update an existent robot in the store (required)
     * @param robotId ID of robot to return (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> updateRobotWithHttpInfo(Robot body, Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(body, robotId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update info about an existing robot (asynchronously)
     * Update info about an existing robot by Id
     * @param body Update an existent robot in the store (required)
     * @param robotId ID of robot to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRobotAsync(Robot body, Long robotId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(body, robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRobot
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @param robotId ID of robot to return (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRobotCall(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/robot/{robotId}"
            .replaceAll("\\{" + "robotId" + "\\}", apiClient.escapeString(robotId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (id != null)
        localVarFormParams.put("id", id);
        if (serialNo != null)
        localVarFormParams.put("serialNo", serialNo);
        if (model != null)
        localVarFormParams.put("model", model);
        if (firmware != null)
        localVarFormParams.put("firmware", firmware);
        if (config != null)
        localVarFormParams.put("config", config);
        if (diadnostic != null)
        localVarFormParams.put("diadnostic", diadnostic);
        if (historyClean != null)
        localVarFormParams.put("historyClean", historyClean);
        if (status != null)
        localVarFormParams.put("status", status);

        final String[] localVarAccepts = {
            "application/json", "application/xml"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/xml", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRobotValidateBeforeCall(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, Long robotId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRobot(Async)");
        }
        // verify the required parameter 'serialNo' is set
        if (serialNo == null) {
            throw new ApiException("Missing the required parameter 'serialNo' when calling updateRobot(Async)");
        }
        // verify the required parameter 'model' is set
        if (model == null) {
            throw new ApiException("Missing the required parameter 'model' when calling updateRobot(Async)");
        }
        // verify the required parameter 'firmware' is set
        if (firmware == null) {
            throw new ApiException("Missing the required parameter 'firmware' when calling updateRobot(Async)");
        }
        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling updateRobot(Async)");
        }
        // verify the required parameter 'diadnostic' is set
        if (diadnostic == null) {
            throw new ApiException("Missing the required parameter 'diadnostic' when calling updateRobot(Async)");
        }
        // verify the required parameter 'historyClean' is set
        if (historyClean == null) {
            throw new ApiException("Missing the required parameter 'historyClean' when calling updateRobot(Async)");
        }
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateRobot(Async)");
        }
        // verify the required parameter 'robotId' is set
        if (robotId == null) {
            throw new ApiException("Missing the required parameter 'robotId' when calling updateRobot(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRobotCall(id, serialNo, model, firmware, config, diadnostic, historyClean, status, robotId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update info about an existing robot
     * Update info about an existing robot by Id
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @param robotId ID of robot to return (required)
     * @return Robot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Robot updateRobot(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, Long robotId) throws ApiException {
        ApiResponse<Robot> resp = updateRobotWithHttpInfo(id, serialNo, model, firmware, config, diadnostic, historyClean, status, robotId);
        return resp.getData();
    }

    /**
     * Update info about an existing robot
     * Update info about an existing robot by Id
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @param robotId ID of robot to return (required)
     * @return ApiResponse&lt;Robot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Robot> updateRobotWithHttpInfo(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, Long robotId) throws ApiException {
        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(id, serialNo, model, firmware, config, diadnostic, historyClean, status, robotId, null, null);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update info about an existing robot (asynchronously)
     * Update info about an existing robot by Id
     * @param id  (required)
     * @param serialNo  (required)
     * @param model  (required)
     * @param firmware  (required)
     * @param config  (required)
     * @param diadnostic  (required)
     * @param historyClean  (required)
     * @param status  (required)
     * @param robotId ID of robot to return (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRobotAsync(Long id, String serialNo, Model model, String firmware, List<String> config, List<Integer> diadnostic, Statistic historyClean, String status, Long robotId, final ApiCallback<Robot> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRobotValidateBeforeCall(id, serialNo, model, firmware, config, diadnostic, historyClean, status, robotId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Robot>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
